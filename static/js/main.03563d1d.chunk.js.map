{"version":3,"sources":["components/Wrapper/index.js","components/Cards/index.js","components/Header/index.js","components/Counter/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Cards","id","src","image","alt","name","onClick","clickedIt","Header","Counter","score","topScore","App","state","fruits","clickedFruit","event","selectedFruit","target","attributes","value","push","this","setState","map","fruit","key","shuffle","sort","Math","random","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"o2EASeA,MANf,SAAiBC,GACf,OAAO,yBAAKC,UAAU,WACrBD,EAAME,W,MCaMC,MAdf,SAAeH,GACd,OACC,yBAAKC,UAAU,SACd,yBACCA,UAAU,MACVG,GAAIJ,EAAMI,GACVC,IAAKL,EAAMM,MACXC,IAAKP,EAAMQ,KACXC,QAAST,EAAMU,c,aCQJC,MAjBf,WACC,OACC,yBAAKV,UAAU,6BACb,yBAAKA,UAAY,kBACjB,kDACA,6BACA,uBAAGA,UAAU,gBAAb,iO,MCGeW,MATnB,SAAiBZ,GAChB,OACO,yBAAKC,UAAY,aACb,2CAAiBD,EAAMa,MAAvB,KACA,6BACA,0CAAgBb,EAAMc,YC6CnBC,E,4MA7CdC,MAAQ,CACPC,SACAC,aAAc,GACdL,MAAO,EACPC,SAAU,G,6DAGII,EAAcC,GAC5B,IAAMC,EAAgBD,EAAME,OAAOC,WAAWZ,UAAU,cAAca,MAElEH,GACHA,EAAcI,KAAKN,GACnBO,KAAKC,SAAS,CAAEb,MAAOY,KAAKT,MAAMH,MAAQ,IAC1CY,KAAKC,SAAS,CAAEZ,SAAUW,KAAKT,MAAMH,SAErCY,KAAKC,SAAS,CAAEb,MAAO,M,+BAIf,IAAD,OACR,OACC,kBAAC,EAAD,KACC,kBAAC,EAAD,MACA,kBAAC,EAAD,CAASA,MAAOY,KAAKT,MAAMH,MAAOC,SAAUW,KAAKT,MAAMF,WACvD,yBAAKb,UAAU,aACd,yBAAKA,UAAU,OACbwB,KAAKT,MAAMC,OAAOU,KAAI,SAAAC,GAAK,OAC3B,kBAAC,EAAD,CACCxB,GAAIwB,EAAMxB,GACVyB,IAAKD,EAAMxB,GACXI,KAAMoB,EAAMpB,KACZF,MAAOsB,EAAMtB,MACbwB,QAAS,EAAKd,MAAME,aAAaa,MAAK,WACrC,MAAO,GAAMC,KAAKC,wB,GAlCTC,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.03563d1d.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">\n  {props.children}\n          </div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\n\nfunction Cards(props) {\n\treturn (\n\t\t<div className='col-3'>\n\t\t\t<img\n\t\t\t\tclassName='img'\n\t\t\t\tid={props.id}\n\t\t\t\tsrc={props.image}\n\t\t\t\talt={props.name}\n\t\t\t\tonClick={props.clickedIt}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default Cards;\n","import React from \"react\";\nimport \"./style.css\"\n\nfunction Header() {\n\treturn (\n\t\t<div className='jumbotron jumbotron-fluid'>\n\t\t\t\t<div className = \"header mx-auto\">\n\t\t\t\t<h1>Choose Yer Fruits!</h1>\n\t\t\t\t<br />\n\t\t\t\t<p className='lead mx-auto'>\n\t\t\t\t\tThis click application will test your memory skills. Choose a\n\t\t\t\t\tdifferent fruit each time, when you select a fruit you have already\n\t\t\t\t\tchosen, the game will reset. Try to get through all 12 without any\n\t\t\t\t\tduplicate selections.\n\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./style.css\"\n\nfunction Counter(props) {\n\treturn (\n        <div className = \"container\">\n            <h1>Your Score: {props.score} </h1>\n            <br />\n            <h1>Top Score: {props.topScore}</h1>\n        </div>\n    )}\n\n    export default Counter;","import React from \"react\";\nimport Wrapper from \"./components/Wrapper\";\nimport Cards from \"./components/Cards\";\nimport fruits from \"./fruits.json\";\nimport Header from \"./components/Header\";\nimport Counter from \"./components/Counter\";\n\nclass App extends React.Component {\n\tstate = {\n\t\tfruits,\n\t\tclickedFruit: [],\n\t\tscore: 0,\n\t\ttopScore: 0\n\t};\n\n\thandleBtnClick(clickedFruit, event) {\n\t\tconst selectedFruit = event.target.attributes.clickedIt(\"data-value\").value;\n\n\t\tif (selectedFruit) {\n\t\t\tselectedFruit.push(clickedFruit);\n\t\t\tthis.setState({ score: this.state.score + 1 });\n\t\t\tthis.setState({ topScore: this.state.score });\n\t\t} else {\n\t\t\tthis.setState({ score: 0 });\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Wrapper>\n\t\t\t\t<Header />\n\t\t\t\t<Counter score={this.state.score} topScore={this.state.topScore} />\n\t\t\t\t<div className='container'>\n\t\t\t\t\t<div className='row'>\n\t\t\t\t\t\t{this.state.fruits.map(fruit => (\n\t\t\t\t\t\t\t<Cards\n\t\t\t\t\t\t\t\tid={fruit.id}\n\t\t\t\t\t\t\t\tkey={fruit.id}\n\t\t\t\t\t\t\t\tname={fruit.name}\n\t\t\t\t\t\t\t\timage={fruit.image}\n\t\t\t\t\t\t\t\tshuffle={this.state.clickedFruit.sort(function() {\n\t\t\t\t\t\t\t\t\treturn 0.5 - Math.random();\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t// shuffle function from https://css-tricks.com/snippets/javascript/shuffle-array/\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</Wrapper>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}